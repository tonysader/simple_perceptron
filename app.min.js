$(document).ready(function () {
  window.scrollTo({ top: 0, behavior: "smooth" });
}),
  (window.indexedDB =
    window.indexedDB ||
    window.mozIndexedDB ||
    window.webkitIndexedDB ||
    window.msIndexedDB),
  (window.IDBTransaction =
    window.IDBTransaction ||
    window.webkitIDBTransaction ||
    window.msIDBTransaction),
  (window.IDBKeyRange =
    window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange),
  window.indexedDB ||
    window.alert("Your browser doesn't support a stable version of IndexedDB.");
let dbname = "networksDb",
  tablename = "networks";
var request = window.indexedDB.open(dbname, 2);
let db;
(request.onsuccess = function (e) {
  (db = request.result).onversionchange = function () {
    db.close(), alert("Database is outdated, please reload the page.");
  };
}),
  (request.onupgradeneeded = function (e) {
    db = request.result;
    request.transaction;
    db.objectStoreNames.contains(tablename) ||
      (networks = db.createObjectStore(tablename, { keyPath: "name" }));
  }),
  (request.onerror = function () {
    console.error("Error", openRequest.error);
  }),
  (function () {
    "use strict";
    angular
      .module("myFirstApp", [])
      .controller("MyFirstController", function (e) {
        (e.level = 1),
          (e.network = {
            inputs_num: 0,
            trainings_num: 0,
            inputs: [],
            trainings: [],
            c: 0.25,
            iterations: 0,
            maxNum: 1e4,
            bias: 0.4,
            solved: !1,
            name: "net",
            commands: [],
          }),
          (e.testing = { values: [], output: 0, sum: 0, finish: !1 }),
          (e.startTesting = function () {
            (e.testing.sum = 0),
              (e.testing.output = 0),
              (e.testing.finish = !1);
            for (let t = 0; t < e.testing.values.length; t++)
              e.testing.sum += e.testing.values[t] * e.network.inputs[t].weight;
            (e.testing.output = e.testing.sum >= e.network.bias ? 1 : 0),
              console.log(e.testing),
              (e.testing.finish = !0);
          }),
          (e.start_train = function () {
            console.log(e.network);
            let t = !1;
            e.network.commands = [];
            let n = "start training:;";
            for (; !t; ) {
              e.network.iterations++,
                e.network.trainings.forEach((t, o) => {
                  n += "Calculating output for (";
                  for (let o = 0; o < e.network.inputs_num; o++)
                    n += t.values[o] + " , ";
                  (n += ");"), (t.output = 0);
                  for (let o = 0; o < e.network.inputs_num; o++)
                    (n +=
                      "+" +
                      t.output +
                      " + " +
                      t.values[o] +
                      "*" +
                      e.network.inputs[o].weight),
                      (t.output += t.values[o] * e.network.inputs[o].weight),
                      (n += "= " + t.output + ";");
                  if (
                    ((t.afterBias = t.output >= e.network.bias ? 1 : 0),
                    (n += 1 == t.afterBias ? "Output = 1;" : "Output=0;"),
                    t.afterBias == t.desired)
                  )
                    (n +=
                      "Do not modify weights because output is like the desired value ;"),
                      (t.solved = !0);
                  else {
                    n += "Calculating new weights: ;";
                    for (let o = 0; o < e.network.inputs_num; o++)
                      (e.network.inputs[o].weight =
                        e.network.inputs[o].weight +
                        e.network.c * (t.desired - t.output) * t.values[o]),
                        (n +=
                          "new weight number " +
                          (o + 1) +
                          "=" +
                          e.network.inputs[o].weight +
                          "= " +
                          e.network.inputs[o].weight +
                          " + " +
                          e.network.c +
                          "*(" +
                          t.desired +
                          "-" +
                          t.output +
                          ")*" +
                          t.values[o] +
                          "=" +
                          e.network.inputs[o].weight +
                          ";");
                  }
                });
              let o = !0;
              if (
                (e.network.trainings.forEach((e, t) => {
                  e.solved || (o = !1);
                }),
                !(e.network.iterations < e.network.maxNum))
              ) {
                n += "Exceeded the maximum number; not solved;";
                break;
              }
              (t = o) || (n += "New iteration:;");
            }
            if (t) {
              e.network.solved = !0;
              for (let t = 0; t < e.network.inputs_num; t++)
                e.testing.values.push(0);
              (n += " Solved! ;"),
                console.log(e.network),
                console.log(e.testing);
            } else alert("not solved");
            (e.network.commands = n.split(";")),
              console.log(e.network.commands);
          }),
          (e.change_input_nums = function () {
            e.network.inputs = [];
            for (let t = 0; t < e.network.inputs_num; t++)
              e.network.inputs.push({ id: t, name: "x" + (t + 1), weight: 0 });
          }),
          (e.change_trainings_num = function () {
            for (let t = 0; t < e.network.trainings_num; t++) {
              e.network.trainings.push({
                name: "s" + (t + 1),
                values: [],
                desired: 0,
                output: 0,
                solved: !1,
                afterBias: 0,
              });
              for (let n = 0; n < e.network.inputs_num; n++)
                e.network.trainings[t].values.push(n);
            }
          }),
          (e.nextLevel = function () {
            e.level++;
          }),
          (e.testingDiv = !1),
          (e.start_test = function () {
            e.testingDiv = !0;
          }),
          (e.oldNetworks = []),
          (e.OtherNetsDiv = !1),
          (e.save_network = function () {
            let t = e.network.name,
              n = !0;
            if (
              (e.oldNetworks.forEach((e, o) => {
                e.name == t && (n = !1);
              }),
              n)
            ) {
              var o = db
                .transaction([tablename], "readwrite")
                .objectStore(tablename)
                .add(e.network);
              (o.onsuccess = function (e) {
                alert("Network saved.");
              }),
                (o.onerror = function (e) {
                  alert("Unable to save network! ");
                });
            } else alert("Network name exists before");
          }),
          (e.loadOtherNetworks = function () {
            !(function () {
              (e.oldNetworks = []),
                $(".old_net_li").remove(),
                indexedDB.open(dbname);
              let t = db.transaction(tablename).objectStore(tablename).getAll();
              t.onsuccess = function () {
                (e.oldNetworks = t.result),
                  e.oldNetworks.forEach((e, t) => {
                    $("#all_old_networks").append(
                      '<li class="mt-3 old_net_li"><button type="button" class="btn btn-dark text-white old_network_choice" network_idx="' +
                        t +
                        '"  name="button">' +
                        e.name +
                        " </button></li>"
                    );
                  }),
                  console.log(e.oldNetworks);
              };
            })(),
              $(".modal#load").fadeIn("slow");
          }),
          (e.show_results = function () {
            $(".modal#details").fadeIn("slow");
          }),
          (e.runOr = () => {
            (e.network.name = "OR example"),
              (e.network.inputs_num = 2),
              (e.network.trainings_num = 4),
              e.change_input_nums(),
              e.nextLevel(),
              e.nextLevel(),
              e.nextLevel(),
              (e.network.trainings = [
                {
                  name: "s1",
                  values: [0, 0],
                  desired: 0,
                  output: 0,
                  solved: !1,
                  afterBias: 0,
                },
                {
                  name: "s1",
                  values: [0, 1],
                  desired: 1,
                  output: 0,
                  solved: !1,
                  afterBias: 0,
                },
                {
                  name: "s1",
                  values: [1, 0],
                  desired: 1,
                  output: 0,
                  solved: !1,
                  afterBias: 0,
                },
                {
                  name: "s1",
                  values: [1, 1],
                  desired: 1,
                  output: 0,
                  solved: !1,
                  afterBias: 0,
                },
              ]),
              e.nextLevel(),
              e.start_train(),
              e.start_test();
          }),
          $("body").on("click", ".clear_database", function () {
            var t = indexedDB.deleteDatabase(dbname);
            (t.onsuccess = function () {
              (e.oldNetworks = []),
                console.log("Deleted database successfully");
            }),
              (t.onerror = function () {
                console.log("Couldn't delete database");
              });
          }),
          $("body").on("click", ".close_modal", function () {
            $(".modal").fadeOut("slow");
          }),
          $("body").on("click", ".old_network_choice", function () {
            let t = $(this).attr("network_idx");
            e.network = e.oldNetworks[t];
            for (let t = 0; t < e.network.inputs_num; t++)
              e.testing.values.push(0);
            (e.level = 5), e.$digest(), $(".modal").fadeOut("slow");
          });
      });
  })();
